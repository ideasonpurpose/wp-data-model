<?php

namespace IdeasOnPurpose\WP;

class Rename
{
    /**
     * __callStatic is a magic method which renames the invoked thing using a string in the first
     * index of $args. Built-in types must be referenced by a known short name, eg. 'post', 'page',
     * 'category', 'tag', etc. Tags can be either 'tag' or 'post_tag'.
     *
     * A simple example call which renames 'Pages' to 'Chapters' looks like this:
     *
     *     WP\Rename::page('chapter');
     *
     * Set the second argument to false to disable singular/plural inflection. Renaming 'Categories'
     * to 'Class' would look like this:
     *
     *     WP\Rename::category('class', false);
     *
     * Individual labels can be overridden by sending an array in the third argument:
     *
     *     WP\Rename::tag('flavors', true, ['popular_items' => 'Most delicious flavors']);
     *
     * Unknown types will be ignored. Overrides should be an associative array and can include some
     * or all available labels.
     *
     * @param String $name - The name of the invoked magic method, use this as the thing to rename
     * @param Array $args - An array of additional args. Breaks down like this:
     *                      [ $singular, $plural, [ $overrides ] ]
     *
     * @link https://www.php.net/manual/en/language.oop5.overloading.php#object.callstatic
     *
     * NOTE: This static method is a wrapper for testability. Static methods are
     * difficult to mock, so all argument transformation was moved to magicHandler.
     * All this does is create a new instance of self, then calls the magicHandler
     * method with whatever arguments it was called with.
     */
    public static function __callStatic($name, $args)
    {
        $instance = new self();
        return $instance->magicHandler($name, $args);
    }

    /**
     * Args are passed directly from __calStatic. Strings and overrides are
     * extracted from $args, then used to call $this->update, which replaces
     * the $name object's default labels
     *
     * @param String $name - The name of the invoked magic method, use this as the thing to rename
     * @param Array $args - An array of additional args. Breaks down like this:
     *                      [ $singular, $plural, [ $overrides ] ]
     */
    public function magicHandler($name, $args)
    {
        $singular = $args[0] ?? null;
        $plural = $args[1] ?? null;
        $overrides = $args[2] ?? [];

        if (!$singular) {
            return new Error('A new name must be provided when renaming.');
        }

        if (!$plural) {
            $plural = $singular;
        }

        if (!is_array($overrides)) {
            return new Error('Overrides must be an array.');
        }

        /**
         * "Tags" are a special case since WordPress stores them as "post_tag".
         * Remap "tag" to "post_tag" to access the built-in taxonomy.
         */
        $name = strtolower($name) === 'tag' ? 'post_tag' : $name;

        $this->update($name, $singular, $plural, $overrides);
    }

    /**
     * Replaces the specified object's default labels with replacement labels
     * generated by DataModel\Labels from $singular and $plural. Any overrides
     * will be merged back on top of this new set of labels.
     */
    public function update($object, $singular, $plural, $overrides = [])
    {
        global $wp_post_types, $wp_taxonomies;

        /**
         * Assign new labels to native objects
         */
        if (array_key_exists($object, $wp_post_types)) {
            $hierarchical = $wp_post_types[$object]->hierarchical;

            $labels = (array) DataModel\Labels::post_type($singular, $plural, $hierarchical);
            $labels = (object) array_merge($labels, $overrides);

            $wp_post_types[$object]->label = $labels->name;
            $wp_post_types[$object]->labels = $labels;
        } elseif (array_key_exists($object, $wp_taxonomies)) {
            $hierarchical = $wp_taxonomies[$object]->hierarchical;

            $labels = (array) DataModel\Labels::taxonomy($singular, $plural, $hierarchical);
            $labels = (object) array_merge($labels, $overrides);

            $wp_taxonomies[$object]->label = $labels->name;
            $wp_taxonomies[$object]->labels = $labels;
        } else {
            new Error("'{$object}' is not a known Post_type or Taxonomy. Unable to rename.");
        }
    }
}
